'use strict';

/**
 * CSS-ART.COM application server
 */

const fs = require('fs');
const mysql = require('./mysql.js');
const express = require('express');
const app = express();
const mustacheExpress = require('mustache-express');
const cache = require('memory-cache');
const html_minify = require('html-minifier').minify;

//const stats = require('./stats.js');

app.use(require('helmet')()); // use helmet
app.use(require('cors')()); // enable CORS

app.engine('html', mustacheExpress());
app.set('view engine', 'html');
app.set('views', __dirname + '/views');
app.disable('view cache');

// start server
const port = 14299;
const server = require('http').Server(app);

// 'body-parser' middleware 
const bodyParser = require('body-parser');
const jsonParser = bodyParser.json();

const styletools_cssloader_version = '1.0.0';
const styletools_cssloader_js = fs.readFileSync('tmp/async-css+all.js', 'utf-8');
const cssart_css = fs.readFileSync('../httpdocs/css/css-art.css', 'utf-8');

// register CSS loader performance timing
app.post('/perf', jsonParser, (req, res) => {
    if (!req.body) return res.sendStatus(400);

    var body = req.body;
    var ip = req.headers['x-forwarded-for'] ||
        req.connection.remoteAddress ||
        req.socket.remoteAddress ||
        (req.connection.socket ? req.connection.socket.remoteAddress : null);
    if (ip.substr(0, 7) == "::ffff:") {
        ip = ip.substr(7);
    }

    mysql.registerPerformanceResults(body.artwork, styletools_cssloader_version, ip, body.browser, body.os, body.perf).then(function(logged) {

        console.log('perf logged', ip, logged);

        res.json({
            "logged": logged
        });
    }).catch(function(error) {
        res.json({
            "error": error
        });
    })

});

// art index
app.get('/', (req, res) => {

    var now = Math.round(Date.now() / 1000);

    res.set('Cache-Control', 'public, max-age: 3600');

    var cached_html = cache.get('/');
    if (cached_html && cached_html instanceof Array && cached_html[0] > (now - 3600)) {
        res.set('Last-Modified', new Date(cached_html[0] * 1000));
        res.set('Expires', new Date((cached_html[0] + 3600) * 1000));
        res.send(cached_html[1]);
        return;
    }

    mysql.getArtworkIndex(styletools_cssloader_version).then(function(index) {

        res.render('index', {
            artworks: index,
            cssart_css: cssart_css
        }, function(err, html) {

            html = html_minify(html, {
                "removeComments": true,
                "ignoreCustomComments": false,
                "ignoreCustomFragments": [],
                "includeAutoGeneratedTags": false,
                "keepClosingSlash": true,
                "collapseWhitespace": true,
                "removeAttributeQuotes": true
            });

            var modified = Math.round(Date.now() / 1000);
            res.set('Last-Modified', new Date(modified * 1000));
            res.set('Expires', new Date((modified + 3600) * 1000));

            // cache HTML
            cache.put('/', [modified, html]);

            res.send(html);
        });
    }).catch(function(err) {
        res.sendStatus(503);
    })

});

// art work
app.get('/:artwork/', (req, res) => {

    var artwork = req.params.artwork;
    if (!artwork) {
        return res.sendStatus(404);
    }

    var now = Math.round(Date.now() / 1000);

    var cached_html = cache.get(artwork);
    if (cached_html && cached_html instanceof Array && cached_html[0] > (now - 3600)) {
        res.send(cached_html[1]);
        return;
    }

    // get artwork from index
    mysql.getArtwork(artwork, styletools_cssloader_version).then(function(pack) {

        if (!pack) {
            return res.sendStatus(404);
        }

        // get performance scores for artwork
        mysql.getScores(pack.name, styletools_cssloader_version).then(function(perfResults) {

            res.render('artwork', {
                description: pack.description,
                author: pack.author,
                original: pack.original,
                codepen: pack.codepen,
                cssart_css: cssart_css,
                cssloader: styletools_cssloader_js,
                cssloader_version: styletools_cssloader_version,
                next: '/',
                prev: '/',
                artwork: JSON.stringify([
                    pack.name,
                    pack.css,
                    pack.html,
                    styletools_cssloader_js
                ]),
                perfResults: perfResults
            }, function(err, html) {

                html = html_minify(html, {
                    "removeComments": true,
                    "ignoreCustomComments": false,
                    "ignoreCustomFragments": [],
                    "includeAutoGeneratedTags": false,
                    "keepClosingSlash": true,
                    "collapseWhitespace": true,
                    "removeAttributeQuotes": true
                });

                // cache HTML
                cache.put(artwork, [Math.round(Date.now() / 1000), html]);

                //console.log(html);
                res.send(html);
            });
        });
    }).catch(function(err) {
        res.sendStatus(503);
    });

});

// start server
server.listen(port, () => {
    console.log("Listening on port " + port);
});